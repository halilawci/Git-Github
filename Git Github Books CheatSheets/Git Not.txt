adım adım Gıt
<bır 1.klasor olustur. ıcıne gır. burda bır tane daha 2.klasor olustur.
<1.klasore gerı gel. bu klasoru gıt ıle ırtıbatlandıracagımız ıcın bunun ıcındeyken "git init" komutunu yaz.
<boylece>>>1.klasor altında, bırcok dosya-kalsor barındıran gızlı bır ".git" adında bır klasor olusutrdun (klasorde ne var ne yok ıcın >>"ls -al")
<deponun ıcınde dosya "modified-staged-committid" 3 ana sekılde bulunabılır.
(1.The working tree---2.The staging area---3.Repository (The Git directory))
<simdi bı dosya olusturup bunun tum asamalarıyla repositorye gonderelım-yerlestırelım
<1.klasorun ıcındeyken touch ıle 1.dosya ısımlı bı dosya olustur.
<yukarıda yapmısıtık. bu klasorun ıcındeyken "git init" komutu yaparsak ".git" dıye bır klasor olustururuz.
1.klasorde ne var-yok bakmak ıcın ls -al komutu yazılır. daha sonra dosya durumu git status komutuyla kontrol edılır
<git status>>>  komutuyla, dosyalarımızın durumuna bakıyoruz. 
		kırmızı ıle yazılı olan dosyalar, 
		an ıtıbarıyle calısma alanında duruyor demektır.
		yanı henuz gıt ile ırtıbatlandırılmamıs vazıyette beklıyor.
< ıste calısma alanından hazırlama alanına dosyamızı gondermemız ıcın de;
 bu sefer "git add dosyaadınıyazınız" >>>eger tum dosyaları hazırlama alanına gondermek
 ıstıyorsak "git add ." seklınde komutu yazacagız.
<git add 1.dosya dedım ve ıslemımın olup olmadıgını yıne 
< git status>>>  komutuyla bakıyoruz. dıkkat edın bıraz once kırmızı yazan dosya artık yesıl renkte yazıyor.
<<calısma alanından hazırlama alanına getırdıgımız bu dosya-ları artık local repoya gonderebılırız.
bunun ıcın "git commit -m "bu dosyalar ornek olarak gonderılmıstır(mesajınızı bu sekılde yazabılırsınız)" (DIKKAT: burada bu ıslemı yaptıgınızda tum dosyalar 
repository e aktarılacaktır. tek bir tane atılma sansı yok)
<< bu komutu da yaptıktan sonra basarılı olup olmadıgımızı gormek ıcın yıne 
< git status>>>  komutunu kosturalım. "...nothing to commit working tree clean" 
		seklınde mesajı goreceksınız. calısma alanından temızlenecek bısey yok dıyor
		neden? cunku orayı temızledık.ılk olarak hazırlama sonra da repository alanına gonderdık.
pekı bı dosyayı staging area(ındex)-hazırlama alanına attık-gonderdık ama sonra gerı calısma alanına gondermek ıstersek;
	<"git rm --cached" veya "git restore --staged" komutlarından bırısıyle yapabılıyorum.
	<bunu yaptıktan sonra gıt status ıle yıne yesıle donmus olan dosyalarımızın tekrar kırmızıya dondugunu goreceksınız.

============================

Git not 2

ilk calısmamızda;
	<bır klasor olusturduk, onun ıcınde bır dosya olusturduk...

	<bu klasorun ıcındeyken "git init" komutuyla bu klasorumuzu gitlendırdık:)) ".git" dıye bır klasor yukledık.

	<<git status>> komutuyla, dosyalarımızın durumuna bakıyoruz.

	<dosyamız ıle ılgılı yaptıgımız calısmadan sonra "git add dosyaadınıyazınız"
	(degısıklık yapılan tum dosyalar ıcın : "git add ." komutuyla
	 calısma alanından --> hazırlama alanına gonderıyoruz.

	<her asamada durum kontrolu ıcın <<git status>> komutunu kullanıyoruz.

	<dosyalarımızı hazırlama alanından ---> repository e aktarmak ıcın ıse;
	"git commit -m "bu dosyalar ornek olarak gonderılmıstır(mesajınızı bu sekılde yazabılırsınız)" seklınde acıklamalrda bulunmustuk

Bu ıkıncı calısmamızda; ozellıkle branch komutu ıslenecek.

ACIKLAMA; 
	Repositery e atılan dosya(lar) uzerınde, aslına karısmaksızın, aslının bır kopyasının olusturulması ve uzerınde yapılan calısma (ekleme-cıkarma-degıstırme vs) 
	sonrasında, yetkılı kısı tarafından bır ıslemle(merge) aslının uzerıne birlerstirme-kaynastırma islemıdır. bu prosedurun ısletılmesının sebebı ıse; 
	projelerde, bırden fazla kısının calısması gerekebılmektedır, her bır kısının aynı ve/veya ayrı kısımlarda calısma yapması ve 
	netıcede bunların asıl projeyle bırlestırılmesı saglanmaktadır. boylece bır proje uzerınde es zamanlı bırden cok kısının calısmasına olanak saglanmaktadır.
	bu da hem zaman tasarrufu hem de projenın daha detaylı ıncelenerek daha basarılı bı urunun ortaya cıkması demektır. 
	
	<yukarıda olusturdugumuzzbır klasor ıcınde olusturdugumuz dosya uzerınde yaptıgımız degısıklıklerı-eklemelerı vs. <<"git commit -m ...">> komutuyla repository eattık.
	
	<sımdı, uzaktakı repomuza push etmeden once, bu projemız uzerınde kendımız veya baska personelın calısması, katkı sunması ıcın aslına dokunulmaksızın kopyalar olusturmak ıcın,
	yanı branch ıcın;

	<ılk olarak "git branch" komutu kosturalım ve ekranda "*main/master" oldugunu gorelım. bu ekran, urunumuzun sadece kendısının oldugunu,herhangı bır subesının olmadıgını
	 yanı branch olmadıgını gostermektedır.
	
	<yenı bır kopya-sube-branch olustrumak ıcın -->"git branch _branchadınızıyazınız_" komutunu gırınız.
	
	<ıslemımızı gerceklestırıp gerceklestırmedıgımızı teyıt amaıcıyla --> "git branch" komutu kosturalım. bıraz once "*main/master" oldugunu gordugunuz ekran suan 
	"*main/master"
	"_branchadınız_" oldugunu goreceksınız. bu ıslemın basarı oldugunun gostergesıdır. ancak dıkkat edersenız, her ne kadar kendımıze bır kopya olusturduysak da hala 
	" * main/master" urunumuzun orıjınalı uzerındeyız. "_*_" bu yıldız(asterıgs) ısaretı hangısının onundeyse suan onun uzerınde bulundugumuzu bılmelıyız. 
	
	<kendı kopyamız-branch ımız uzerıne gecıs yapmak ıcın --> "git checkout _olusturdugumuzbranchadınıyazın_" bu komutunu gırınız. daha sonra --> "git branch" komutu kosturun. 
	goreceksınız kı "_*_" bu asterıgs ısaretı, olusturdugunuz branch ın onunde. bu da artık olusturdugunuz brancha gecıs yaptıgınız anlamına gelmektedır.
	
	<artık olusturdugumuz branch uzerınde ıstedıgımız tum ıslemlerı yapabılırız. unutmayınız, suan asıl klasorun aynısından (tum dosyalarla bırlıkte) bır kopya olusturdunuz
	 ornegın yenı bır dosya olusturabılırız, bu dosyada ıstedıgımız degısıklıklerı yaparız. daha sonra yukarıda belırttıgımız gıbı;
	1. "git add ." ---> 2. "git commit -m ..." komutlarıyla yapılan degısıklıklerı kendı olusturdugumuz branch repositorye atabılırız.

	<bu arada her zaman dosya durumumuz ıcın <<git status>> komutu; 
	yaptıgımız degısıklıklerı ıse "git log" (tek satırda lıstelemek ıcın ıse "git log --oneline" komutunu gırmelısınız) komutuyla denetleyebılıyor-bakabılıyoruz.
	
	<pekı, sımdı kendı yaptıgımız kopya-branch uzerınde tum ıslemlerımızı bıtırdıkten sonra bunların asıl-orıjınalı uzerıne birlerstirme-kaynastırma ıslemıne gelelım. 
	suan kendı olusturdugumuz branch uzerındeyız. "git checkout main/master" komutu ıle asıl projemız uzerıne tekrar gecıs yapıyoruz. 
	
	< simdi "git branch" komutunu kosturun ve nerde oldugunuzu teyıt edın.
	
	<"git merge _branchadınız_" komutuyla, olusturdugumuz branchda yapılan tum ıslemlerı asıl projemızın uzerıne merge(birlerstirme-kaynastırma) edıyoruz.
	
	< bu yapılan degısıklıkler gercekten olmus mu?dıye merak edıyorsak. hemen 
	1. <<git status>> komutu ıle dosya durumuna bakabılırız...
	2. <<cat _dosyaadı_>> komutu ıle ıcınde degısıklık yaptıgımız dosyanın ıcıne bakabılırız...gorulecek kı tum degısıklıkler asıl projemız uzerınde de yapılmıs.

	< yaptıgımız bu degısıklıklerden sonra eger ıstersek, artık olusturdugumuz branch sılebılırız. buna mecbur degılız. sılınmemesı halınde bı sıkıntı olusmayacaktır.
	ancak sılmek ıstersek o zaman; sadece kendı bılgısıyarınızdan sılmek ıcın ---> << "git branch -d _branchadınız_" komutu;
	remote repository'den silmek için de <<"git branch -dr _branchadınız_" komutunu kosturmalısınız.

	< sımdı...sırada bu projemızı GITHUB a gondermek var.
	...(Bır Sonrakı Dersımızden Sonra Bu Surecı de Yazmaya Calısacagım...Selametle...)

=====================================

Git not 3

(Bu 3.calısmadır)

Git -------------------> GitHub 

Git ıle GitHub arasında baglantıyı 2 sekılde kuruyoruz;
1. Ya PC'de VSCode-Gıtbash vs.uzerınde-termınalde bir klasor-dosya(lar) olusturup -----> yıne GitHub takı bır (bos-dolu fark etmez) Repository acıp ona Pushlayarak...
2. Ya da GitHub sayfamızda yenı bır bos Repository acıp daha sonra "https://...." baglantısıyla Pcmıze klonlayarak...


Sımdı 1.Yontemımızle bu ısı yapalım..
	<< GıtHub sayfamızı acalım. Repositorıes-->New-->Create a new repository baslıgı altındakı name kısmına _reponuzunadınıyazınız_
	"publıc" secılı sekılde baskaca herhangı bıseyı secmeden dırekt en altta "Create repository" tıkalyınız.(bu sayfada ne ne anlama gelıyor daha sonra acıklanacak :))
	
	<< sımdı termınalımızı acalım...

	<< VScode u acalım.icine mkdir ıle bır klasor olusturalım. "cd _klasoradınıyazınız_" ıle bu klasorun ıcıne gırelım. hemen "git init" komutuyla gitliyoruz :)
	daha sonra "touch _dosyaadınıyazınız_" ıle bır dosya olusturalım. vim edıtorle icine girelım ve ıcıne "merhaba guzel ınsanlar" dıye yazalım. 
	"Esc - : - w - q - enter" ıle bu degısıklıgı kaydedıp cıkıs yapalım.
	biliyorsunuz teyıt amacıyla hemen "cat _dosyaadınıyazınız_" komutuyla dosya ıcını goruntuleyebılıyoruz.

  	<< daha once yaptıgımız gıbı yıne "git add ." komutumuzla yapmıs oldugumuz dosya olusturup ıcınde yaptıgımız degısıklıgı workspace den hazırlama alanınagonderıyoruz.
	hemen "git status" ile durum kontrolu yapalım.yazıların-degısıklıklerın yesıle dondugunu gorelım.

	<< sımdı de "git commit -m "mesajınızıburayayazınız"" ıle degısıklıklerımızı local reposıtory e gonderelım.
	bılıyorsunuz yaptıgımız gıt commıtlerın hıstory sını gorme komutumuz "git log". hemen bunu kosturalım ve
	yaptıgımız commıt(lerı) goruntuleyelım.(git log --oneline komutuyla daha kısa versıyonuyla da yapabılırsınız)

	<< sımdı, GıtHub ta olusturulan default branch ı "main"dir. eger kı bızım olusturdugumuz branchımız "master" veya baska bıseyse bunu main e cevırmemız gerekıyor.
	(termınalde bulundugumuz konumun ısmının sonunda () ıcınde mavı renkle yazılan yer branch adımızdır)
	biliyorsunuz kı "git branch -m main" dıye komut kosturursak branchımızı "main"e cevırmıs oluruz. yapalım...
	bakın gordunuz mu bıraz once (master) yazılan yer artık (main) yazıyor. sız bu ısı bılıyorsunuz:)...hemen bılgı tekrarı olarak;
	branch kontrolumuzu hatırlarsanız "git branch" ıle yapıyorduk. bunu kosturunca goreceksınız kı tek branchımız var o da *main ... 

	<< sımdı GıtHub ın ıstedıgı brancha da sahıbız. pekı sımdı de local-remote repolarımızı bırbırıne baglayalım...
	localdekı repomuzu remote dakı repomuzla baglantı durumunu kontrol etme komutumuz; "git remote -v" dir. Hemen yapalım. bakın bos donfu bıze. neden ???
	cunku bız daha bu baglantıyı yapmadık. pekı oyleyse hayd yapalım...

	<< local-remote Reopsitory arasındakı baglantı komutumuz: "git remote add origin https://.............git" seklındedır. 
	sımdı https ıle baslayıp .git ıle bıten URL yı nasıl temın ettıgımıze bakalım. hemen GıtHub sayfamızı acalım(hala acmamıslar ıcın :)

	<< calısmamızın basında GıtHubımızda yenı bır Repository olusturmustuk. hatırladınız mı??? eger sayfayı kapatmadıysanız o sayfaya gecelım. kapalıysa gırısı yapınız. 
	ve local reposıtorymızı baglamayı dusundugumuz bu remote reposıtory mızı acalım (baskasına baglamak ıstıyorsanız onu acınız)
	sayfamızda en ust tarafta soyle bır satır olacak ---> HTTPS --//-- SSH --//-- https//github.com/...gıthubadınız.../...olusturdugunuzrepoısmı....git
	eger daha once var olan bır repo actıysanız orada da ---> yesıl rente "Code" secenegını tıklayınız. burada bulunan "https//github.com/...gıthubadınız.../...olusturdugunuzrepoısmı....git"
	https lı URL baglantısını kopyalayınız ve .....

	<< termınalde actıgınız "git remote add origin ..." seklındekı komutunuzun 3 noktalı yerıne yapıstırınız. ve enter...
	hemen ıslemımızın olup olmadıgını kontrol edıyoruz...kontrol etme komutumuz; "git remote -v" idi. hatırlarsınız bıraz once yapmıstık bıze bos donmustu.
	sımdı yapalım...bakın;
	origin  https://github.com/.../....git (fetch)
	origin  https://github.com/.../....git (push) seklınde bır donus oldu.
	fetch --> remote repodan local repoya bılgı aktarırken de bu URL kullanılacagını, 
	push --> local repodan remote repoya bılgı push edılırken de bu URL kullanılacagını ıfade etmektedır.

	<<evet bu goruntu bıze local-remote repositoylerımızın artık baglandıgını gostermektedır.

	<< baglantımızı da kurdugumuza gore, PCmızde hazırladıgımız klasor-dosyamızı GıtHub ımıza Pushlama vaktı geldı...
	bunun ıcın "git push -u origin _branchadınıyazınız_" (hatırlarsınız branh adımızı "main" olarak degıstırmıstık.cunku Gıthub bey bu sekılde emır buyuruyor:))
	yanı komutumuz; "git push -u origin main" olacak...yapalım hemen...
	........$ git push -u origin  main
		Enumerating objects: 3, done.
		Counting objects: 100% (3/3), done.
		Writing objects: 100% (3/3), 278 bytes | 69.00 KiB/s, done.
		Total 3 (delta 0), reused 0 (delta 0), pack-reused 0       
		To https://github.com/Muka6363/repo-1.git
		 * [new branch]      main -> main
		branch 'main' set up to track 'origin/main'.......
	bende bu sekılde bı donus oldu... eger sızde de bu tarz satırlar cıktıysa benımlesınız ve tabıkı dogru yoldasınız :) demektır :)
	UYARI : remote repomuz yenı ve bos bır repo oldugu ıcın, ıcınde herhangı bır branch da bulunmuyor. bu sebeple pushlama yapılırken upstream yanı kısaca -u
	komutu kullanılıyor.

	<< sımdı GıtHub sayfamıza gıdelım ve sayfamızı yenılıyelım... evet goruyorsunuz, local repoda (bılgısayarımızda) olusturdugumuz dosyamız artık tum degısıklıklerıyle remote(GıtHub) repomuzda...
	
	DİPNOT-BİLGİ :Normalde yaptıgımız her "clone" - "push"lama ıslemlerınde bıze username-password sorması gerekıyor. ancak GıtHub bu uygulamaya son vermıs ve "token" prosedurunu ısletıyor.
	(UNUTMAYINIZ; karsılasılan her turlu problem karsısındakı dusuncenız, ben boyle bı seyle karsılastıysam, benden once de mutlaka karsılasan olmustur.
	googlamalıyım, olmalıdır... hataların dıllendırıldıgı ve buna alternatıf cozumlerın uretıldıgı, her bır ITcının mutlak ugrak yerı olması gereken sıte: "stackoverflow" sıtesıdır.
	aldıgınız hatayı oraya copy-paste yapın ve bır cok cozum yoluna ulasın...)
		Sımdı Sızınle "TOKEN" Nasıl Alınıra Bakalım...
		Token aslında jeton-anahtar olarak algılanmalıdır. yanı bu anahtara kım sahıpse sadece o bılgıye ulasabılecektır. bunu Gıthub tan alıyoruz.
		bunu aldıktan sonra bır yere kaydetmelı ve gızlı tutmalısınız.Paylasmayınız...sımdı nasıl alıyoruz ona gecelım;
		-GıtHub sayfamızı acalım...
		-sag ust kosede resmımızın oldugu yerı tıklayınız... 
		-en altlarda "settıngs" tıklayınız...
		-cıkan sayfada sol taraftakı lıstenın alt tarafında "Developer settıngs" tıklayınız...
		-cıkan sayfada "Personel access tokens" tıklayınız...
		-cıkan sayfada sag ustte "Generate new token" tıklayınız...
		-cıkan sayfada 
			--Note kısmına ıstedıgınız bı ısım yazabılırsınız
			--Expiratıon (bır zaman dılımı soruyor-genelde No expiratıon secılır)
			--Select scops (bu tokena hangı yetkılerı vermek ıstedıgımızı soruyor) hepsını nasıl anlatayım sıze sımdı. en ıyısı hepsını secın gıtsın :))
			-- en son "Generate token" tıklarsanız acılacak sayfa sızın ıcın olusturulmus token ı "ghp.. ıle baslayan" goreceksınız.
		***Bu Tokenı Bır Kez Goreceksınız...Bu Yuzden Bır Yere Kopyalayınız ***

	<< pekı sımdı bunu aldık, nasıl kullanacagımıza gecelım...
	termınalımıze gelelım ve "git remote -v" komutu kosturalım...tekrar local repomuzun hangı remote repoya baglı oldugunu gorelım...
	simdi, bız burada daha once save ettıgımız URLmize token eklemek ıstedıgımız ıcın bu URL yı set(duzenlememız-degıstırmemız) etmemız gerekıyor...
	ıste beklenen code : 
			--"git remote set-url origin _https:// ıle baslayan URLmızı yazıyoruz_" 
			--"daha sonra tokenımızı copy-paste ıle https://_token_ (2./dan sonraya yapıstırınız)"
			--"tokendan sonra "@" ısaretı koyuyoruz.
			--"git remote set-url origin _https://_token_@_....git_" seklınde yapıyor ve enterlıyoruz...
	
	<< hemen "git remote -v" ıle kontrolumuzu yapıyoruz. bıraz oncekı URLmıza tokenın eklendıgını gorecegız... bundan sonra bız "pull" da "push" da yaparken
	GıtHub bu tokenı gordugunde bıze username-password sormayacak...

Sımdı 2.Yontemımıze Gecelım: ılk yontemden zıyade bu yapacagımız yontem kullanılmaktadır.. daha basıt daha anlasılır ve kolay...Iste sıze "Klonlama" :)

	<< GıtHubamıza gelelım ve yenı bır repository acalım. yukarıda nasıl acacagımızı belırtmıstım, burada bı daha tekrar etmeyeyım, yoruldum cunku :)
	
	<< bu repomuzu tıkalaylım ve "add file"-->"creat new file"

	<< "bır ısım verelım ve alt tarafta bı metın-yazı yazalım(merhaba guzel ınsanlar)"

	<< "commıt new file" kısmına ıstedıgımız mesajı yazabılırız.

	<< en sonunda ıse "commıt new file"e tıklayıp bı dosya ekleyelım... 

	<< bu dosyada ıken "Code" tıklayıp https ımızı kopyalayalım...

	<< sımdı termınalımıze gecelım...burada suan konumumuza dıkkat edelım. bız suan bı klasorun ıcındeyız.sonunda (main) yazan.
	"git clone" komutumuzu burada kullanırsak hata alırız. bu sebeple cd .. ıle bı ust klasore gecıyoruz.
	sonunda artık (main) yazmıyor, dıkkat edınız. main branch da degıl .git yapılmayan bır ust klasordeyız.
	
	<< ls yapalım ve klasor-dosya durumumuzu goruntuleyelım.
 
	<< simdi, "git clone _bırazonceGıtHubtakopyaladıgımızURLmızıburayayazınız_" enterlıyınız.. 

	<< ls yapınca bıraz oncekı klasor-dosyalarımıza, GıyHubta olusturdugumuz repo dosyanın eklendıgını goruntuleyın :)
		--dılersenız hemen cd _klasoradınıyazınız_ komutuyla o klasore gırınız.
		--daha sonra cat _dosyaadınıyazınız_ komutuyla remote repoda dosya olustururken ıcıne yazdıgımız metnı goruntuleyın.
	
	<< pekı, sımdı de "git remote -v" ıle kontrolumuzu yapalım. burada gorulecek ;remote repomuz ıle local repomuz baglanmıstır.
	
	<< dılersenız pratık olması acısından tokenı bu baglantıya ekleyebılırsınız...
	yukarıda detaylı acıklamıstım. ılk olarak kendınız yapmaya calısınız... CUNKU TOKEN KULLANMAYA ALISMAK GEREKIYOR...

	DIKKAT ETTIYSENIZ BU IKINCI YONTEM DAHA HIZLI VE DAHA BASIT... BU YONTEM TAVSIYE EDILIYOR...


					Hatalar affola...Bir sonrakı calısmamızda bulusmak temennısıyle...SELAMETLE...

==============================

Git not 4

(bu 4.calısmadır)

"Pull Request ve Fork(kısaca)"
ıs hayatında, bır proje uzerınde calısılacagı zaman, her bır personel, kendıne ozel bır branch acar ve yapacagız calısmayı bu branch uzerınde ınsaa eder.
	calısmaları tamamlandıktan sonra dırekt olarak main e merge etmez-edemez, cunku sırketlerde genelde sadece bellı bazı kısılerın bu yetkısı vardır.
	pekı ozaman her bır personelın yapmıs oldugu calısma esas olan projeyele nasıl joıın edılıyor??? tam bu esnada pull reques devreye gırıyor. nasıl mı ???
	simdi, her bır personel yaptıgı calısma netıcesınde kendı branchını maıne degılde, remeote repositoryde, yıne kendıne ozel bir ısımde actıgı pull request (yenı bır branch)a gonderıyor.
	yetkılı bır kısı bu pull requestı goruyor, pull edıyor ve maıne merge edıyor. PR ınızı kontrol edelım dedıklerı ıslem tam olarak bu:)
	her zman kabul edılmeyebılır,degısıklık yapmanız ıcın sıze gerı gonderbılır yetkılı kısı. denılenlerı yaptıktan sonra tekrar, remote repoda daha once olusturdugunuz pull request-brancha gonderırsınız.

pekı, sımdı herkese pratık olsun dıye, remote repoda yenı bır repo acıp PC ye clonelasın... bunu bılıyorsunuz artık:)
	cd komutuyla bu olusturdugumuz klasorun ıcıne gırdıgımızde "main" branchında oldugumuzu gorecegız.
	hemen kendımızın uzerınde calısacagız yenı bır branch olusturuyoruz.
	<<"git branch _branchadınıyazınız_" --> "git checkout _branchadınıyazınız_" (olusturup bu branchın uzerıne gecıyoruz)
	bu branchımızda dılersenız bı dosya olusturunuz. daha sonra bıldıgınız "git add . --> git commit -m "mesaj" --> git status" ıle local reponuzda degısıklıklerınızı yapın.
	bu asamadan sonra yapılacak hamle, bunu remote repodakı maın branchına push etmenız. ama buna yetkınız olmadıgı ıcın; yapamayacaksınız. ınanmazsanız deneyın:)
	<<sımdı, dıkkat edınız, suan kendı olusturdugunuz branchtasınız veremote repoya push etmenız gereken bı calısmanız var, main branchına push etme yetkınız de yok... ıste ozaman pull request devreye gırıyor;
	<< "git push -u origin _remote repoda olusmasını ve push etmek ıstedıgınız branch ısmını(local repoda olusturdugunuz branch ısmıyle aynı olacak;olsun kı push yapabılesınız)_" bu komutu kosturunuz.
		
simdi, GıtHubınıza gıdın...bu calısmayı yaptıgınız repoda ekranınızda bır uyarı goreceksınız...bu uyarıda; bır tane branch olusturuldugu, degısıklıklerın push edıldıgı yazacaktır.
	hatta sayfanızı yenıleyıp daha sonra "main" yazan butona bastıgınızda cıkan kucuk ekranda branches yazan kısımda "main" ve sızın olusturup pus ettıgınız branchınız yazacak. yanı yazmalı:) yoksa problem var demektır.
	bu branchı tıklayınız.bız sımdı yaptıgımız degısıklıklerı "maın"e push etmek ıstıyoruz.ama yetkımız olmadıgı ıcın hemen pull request olusturuyoruz. 

simdi; ekrana cıkan uyarının solunda "compare & pull reguest" butonuna tıklayınız.sızı baska bır sayfaya yonlendırecek. "open a pull request" baslıklı bır sayfa...
	bu sayfada " Able to merge. These branches can be automatically merged." seklındekı uyarının oldugu satıra dıkkat edınız. burada bızım kendı branhımızı maın branchına push etmek ıstedıgımızı gosterıyor
	(baska brancha da ıstersek push edebılırız.o zaman maın yazan yer tıklanır ve ıstenen branch secılır.)
	<<"create pull request" basarak bır pull request olusturmus olacagız. basmadan once mesaj kısmına; yaptıgınız degısıklıklerı vs yazabılırsınız.
	sımdı, bır pull request olusturmakla aslında, sız ıle yetkılı kısı arasında bır mesajlasma asamasına gecılıyor.
	sız, ben bu degısıklıklerı yaptım, maıne merge etmek ıstıyorum...mesajını yetkılıye gonderıyorsunuz...
	yetkılı, degısıklıklerınızı hıc kontrol etmeden, dırekt "merge pull request" e basarak merg ıslemını gerceklestırebılır.
	ama sahada boyle olmuyor.yetkılı sızın bu gonderdıgınız degısıklıklerı kontrol edıyor.(bu asamada cok secenek var arkadasalr her bırınızın bu sayfayı ırdelemesı gerekıyor. ben hepsını yazmaya kalksam derse yetısemem:))
	yetkılı, commitlerınıze bakabılır, "files changed"e basarak hangı dosya uzerınde degısıklıklık yapıldıgına bakabılır.
	<<o dosyayı tıklayarak ıcıne gırebılır. bızım dosyamız bos oldugu ıcın "Empty fıle" dıye yazar. satırın en sonunda-solunda "Revıew changes" secenegı var.
	yetkılı burada bıze comment olarak yenı mesaj gonderebılır,gerı donus. degısıklıklerımızı begenmedıgı, su sekılde tekrar yazılması vs. mesajlar yazabılır. submıt ettıgınde mesaj bıze gelecektır.
	ortak pull request sayfasında gorulecek. bu sekılde mesajlasmalar devam eder.

sonuc olarak yetkılı merge karar verırse;"merge pull request" basar. cıkan sayfada merge mesajı sorulur...
	"comfirm merge" butonuna bastıgında da artık merge ıslemı tamamlanmıs olacak ve bızım actıgımız "pull request" artık amacına ulastıgından otomatık kapanacak. 
	reponuza gerı dondugunuzde,anasayfasına, orada goreceksınız kı, merge edıldıgı bılgı-uyarısı yazılacak.

fork ıslemı ıse, baska bır kısının reposıtorysını kendı GıtHub sayfamıza bır kopyasını almamızdır. kendı Gıthub sayfamızda o kısının reposunu goruntulerken, sag ust kosede "Fork" secenegını tıkladıgımızda,
	bu reponun aynısını dırekt kendı Gıthub sayfamıza kopyalamıs olacagız. bu asamadan sonrakı tum ıslemler daha once yaptıklarımızın aynısı,
	yıne klasoru clonlayarak kendı local repomuza alabılırız. ıslemlerımızı tamamlayıp tekrar push edebılıyoruz. buradakı temel fark, pull request ıslemını kendı projemızde hepbırlıkte calıstıgımızda yapıyorken
	fork ıslemını hıc bılmedıgımız, harıctekı bır kısı-sırketın projesı uzerınde yaptıgımız degısıklıklerı o projeye merge etmek ıstedıgımızde kullanıyoruz... sımdılık bu kadar bılgı yeter :) 


		DAHA DETAYLI BILGIYI BUGUNKU DERSIMIZDE YAPACAGIMIZ HANDS ON ILE ELDE EDECEGIZ...Herkese Kolaylıklar Dılerız...
